/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EncryptedMessagingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getInboxIds"
      | "getOutboxIds"
      | "isIVUsed"
      | "keyRegistry"
      | "lastNonce"
      | "lastSentAt"
      | "messages"
      | "minIntervalSeconds"
      | "nextMessageId"
      | "registerRSAPublicKey"
      | "sendMessage"
      | "setMinInterval"
      | "usedIV"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "KeyRegistered"
      | "MessageSent"
      | "MinIntervalUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getInboxIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboxIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIVUsed",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keyRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSentAt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minIntervalSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMessageId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerRSAPublicKey",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      AddressLike,
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedIV",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInboxIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboxIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIVUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastSentAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minIntervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMessageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRSAPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedIV", data: BytesLike): Result;
}

export namespace KeyRegisteredEvent {
  export type InputTuple = [
    owner: AddressLike,
    rsaPubKeySha256: BytesLike,
    rsaPubKeyURI: string,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    rsaPubKeySha256: string,
    rsaPubKeyURI: string,
    updatedAt: bigint
  ];
  export interface OutputObject {
    owner: string;
    rsaPubKeySha256: string;
    rsaPubKeyURI: string;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    id: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    timestamp: BigNumberish,
    sha256Hash: BytesLike,
    iv: BytesLike,
    contentCidHash: BytesLike,
    keyCidHash: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    sender: string,
    recipient: string,
    timestamp: bigint,
    sha256Hash: string,
    iv: string,
    contentCidHash: string,
    keyCidHash: string,
    nonce: bigint
  ];
  export interface OutputObject {
    id: bigint;
    sender: string;
    recipient: string;
    timestamp: bigint;
    sha256Hash: string;
    iv: string;
    contentCidHash: string;
    keyCidHash: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinIntervalUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish];
  export type OutputTuple = [newValue: bigint];
  export interface OutputObject {
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EncryptedMessaging extends BaseContract {
  connect(runner?: ContractRunner | null): EncryptedMessaging;
  waitForDeployment(): Promise<this>;

  interface: EncryptedMessagingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getInboxIds: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getOutboxIds: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  isIVUsed: TypedContractMethod<
    [sender_: AddressLike, recipient_: AddressLike, iv_: BytesLike],
    [boolean],
    "view"
  >;

  keyRegistry: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        rsaPubKeySha256: string;
        rsaPubKeyURI: string;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  lastNonce: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastSentAt: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  messages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint
      ] & {
        id: bigint;
        sender: string;
        recipient: string;
        timestamp: bigint;
        sha256Hash: string;
        iv: string;
        contentCidHash: string;
        keyCidHash: string;
        nonce: bigint;
        sigR: string;
        sigS: string;
        sigV: bigint;
      }
    ],
    "view"
  >;

  minIntervalSeconds: TypedContractMethod<[], [bigint], "view">;

  nextMessageId: TypedContractMethod<[], [bigint], "view">;

  registerRSAPublicKey: TypedContractMethod<
    [rsaPubKeySha256: BytesLike, rsaPubKeyURI: string],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [
      recipient: AddressLike,
      contentCID: string,
      keyCID: string,
      sha256Hash: BytesLike,
      iv: BytesLike,
      nonce: BigNumberish,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setMinInterval: TypedContractMethod<
    [newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  usedIV: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getInboxIds"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOutboxIds"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isIVUsed"
  ): TypedContractMethod<
    [sender_: AddressLike, recipient_: AddressLike, iv_: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "keyRegistry"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        rsaPubKeySha256: string;
        rsaPubKeyURI: string;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastSentAt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint
      ] & {
        id: bigint;
        sender: string;
        recipient: string;
        timestamp: bigint;
        sha256Hash: string;
        iv: string;
        contentCidHash: string;
        keyCidHash: string;
        nonce: bigint;
        sigR: string;
        sigS: string;
        sigV: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "minIntervalSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextMessageId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerRSAPublicKey"
  ): TypedContractMethod<
    [rsaPubKeySha256: BytesLike, rsaPubKeyURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      contentCID: string,
      keyCID: string,
      sha256Hash: BytesLike,
      iv: BytesLike,
      nonce: BigNumberish,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinInterval"
  ): TypedContractMethod<[newValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedIV"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "KeyRegistered"
  ): TypedContractEvent<
    KeyRegisteredEvent.InputTuple,
    KeyRegisteredEvent.OutputTuple,
    KeyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "MinIntervalUpdated"
  ): TypedContractEvent<
    MinIntervalUpdatedEvent.InputTuple,
    MinIntervalUpdatedEvent.OutputTuple,
    MinIntervalUpdatedEvent.OutputObject
  >;

  filters: {
    "KeyRegistered(address,bytes32,string,uint64)": TypedContractEvent<
      KeyRegisteredEvent.InputTuple,
      KeyRegisteredEvent.OutputTuple,
      KeyRegisteredEvent.OutputObject
    >;
    KeyRegistered: TypedContractEvent<
      KeyRegisteredEvent.InputTuple,
      KeyRegisteredEvent.OutputTuple,
      KeyRegisteredEvent.OutputObject
    >;

    "MessageSent(uint256,address,address,uint64,bytes32,bytes12,bytes32,bytes32,uint128)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "MinIntervalUpdated(uint64)": TypedContractEvent<
      MinIntervalUpdatedEvent.InputTuple,
      MinIntervalUpdatedEvent.OutputTuple,
      MinIntervalUpdatedEvent.OutputObject
    >;
    MinIntervalUpdated: TypedContractEvent<
      MinIntervalUpdatedEvent.InputTuple,
      MinIntervalUpdatedEvent.OutputTuple,
      MinIntervalUpdatedEvent.OutputObject
    >;
  };
}
